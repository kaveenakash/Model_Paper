"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _SourceMap = _interopRequireDefault(require("./SourceMap"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const bindings = require('../parcel_sourcemap_node/index');

class NodeSourceMap extends _SourceMap.default {
  constructor(opts = '/') {
    super(opts);
    this.sourceMapInstance = new bindings.SourceMap(opts);
    this.projectRoot = this.sourceMapInstance.getProjectRoot();
  }

  addVLQMap(map, lineOffset = 0, columnOffset = 0) {
    let {
      sourcesContent,
      sources = [],
      mappings,
      names = []
    } = map;

    if (!sourcesContent) {
      sourcesContent = sources.map(() => '');
    } else {
      sourcesContent = sourcesContent.map(content => content ? content : '');
    }

    this.sourceMapInstance.addVLQMap(mappings, sources, sourcesContent.map(content => content ? content : ''), names, lineOffset, columnOffset);
    return this;
  }

  addIndexedMappings(mappings, lineOffset = 0, columnOffset = 0) {
    let mappingBuffer = this._indexedMappingsToInt32Array(mappings, lineOffset, columnOffset);

    this.sourceMapInstance.addIndexedMappings(mappingBuffer);
    return this;
  }

  fromBuffer(buffer) {
    this.sourceMapInstance.fromBuffer(buffer);
    return this;
  }

  toBuffer() {
    return this.sourceMapInstance.toBuffer();
  }

  findClosestMapping(line, column) {
    let mapping = this.sourceMapInstance.findClosestMapping(line - 1, column);

    if (mapping) {
      let v = this.indexedMappingToStringMapping(mapping);
      return v;
    } else {
      return null;
    }
  }

  addSourceMap(sourcemap, lineOffset = 0, columnOffset = 0) {
    this.sourceMapInstance.addSourceMap(sourcemap.sourceMapInstance, lineOffset, columnOffset);
    return this;
  }

  addBuffer(buffer, lineOffset = 0, columnOffset = 0) {
    let previousMap = new NodeSourceMap(buffer);
    return this.addSourceMap(previousMap, lineOffset, columnOffset);
  }

  extends(input) {
    // $FlowFixMe
    let inputSourceMap = Buffer.isBuffer(input) ? new NodeSourceMap(input) : input;
    this.sourceMapInstance.extends(inputSourceMap.sourceMapInstance);
    return this;
  }

  delete() {}

  static generateEmptyMap({
    projectRoot,
    sourceName,
    sourceContent,
    lineOffset = 0
  }) {
    let map = new NodeSourceMap(projectRoot);
    map.addEmptyMap(sourceName, sourceContent, lineOffset);
    return map;
  }

} // $FlowFixMe


exports.default = NodeSourceMap;
const init = Promise.resolve();
exports.init = init;